- Problem: Matrix Search
    Write an efficient algorithm that searches for a value in an m x n matrix.

    This matrix has the following properties:
    Integers in each row are sorted from left to right.
    The first integer of each row is greater than or equal to the last integer of the previous row.

- Example:
    Consider the following matrix:
    [
      [1,   3,  5,  7],
      [10, 11, 16, 20],
      [23, 30, 34, 50]
    ]
    Given target = 3, return 1 ( 1 corresponds to true )

    Return 0 / 1 ( 0 if the element is not present, 1 if the element is present ) for this problem

- My approach to solve this problem:
    - Go through each row, check if the target exists, and then if it does go through the column of
    the specific row using binary search

- Complexity:
    - Time complexity: O(M * logN)
    - Space complexity: O(1)

- Improvements/Comments
    - If we make the whole 2d array into 1d array, the array is completely sorted. So, we can use
    % n and / n to get corresponding values and that enables us to solve it in just one loop.