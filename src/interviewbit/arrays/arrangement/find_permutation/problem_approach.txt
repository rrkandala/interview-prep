- Problem:
    - Given a positive integer n and a string s consisting only of letters D or I, you
    have to find any permutation of first n positive integer that satisfy the given input string.
    D means the next number is smaller, while I means the next number is greater.
- Notes:
    - Length of given string s will always equal to n - 1
    - Your solution should run in linear time and space.
- Example:
    n = 3
    s = ID
    Return: [1, 3, 2]

- My notes:
    - When n = 3, we have 6 permutation of 1, 2, 3
    - {1,2,3}, {1,3,2}, {2,1,3}, {2,3,1}, {3,1,2}, and {3,2,1}
    - string can be ID or DI or II or DD
- My approach to solve this problem:
    - Define integer min and max to keep track of minimum number and maximum number from 1 - n
    integers.
    - Loop through the string chars. If the letter is I, add the min value of positive integer
    to the output list. Then increment min. If the letter is D, add the max of the given positive
    integers to the output list, then decrement max.
    - After going through the loop, the min and max should be same. Add either min or max to the
    output array.

