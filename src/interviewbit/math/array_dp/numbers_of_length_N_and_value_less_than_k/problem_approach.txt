- Problem: Numbers of length N and value less than K
    Given a set of digits (A) in sorted order, find how many numbers of length B are possible whose
    value is less than number C.

- Example:
	Input:
	  3 0 1 5
	  1
	  2
	Output:
	  2 (0 and 1 are possible)

	Input:
	  4 0 1 2 5
	  2
	  21
	Output:
	  5 (10, 11, 12, 15, 20 are possible)

- Note:
    All numbers can only have digits from the given set.
    Constraints: 1 <= B <= 9, 0 <= C <= 1e9 & 0 <= A[i] <= 9

- My approach to solve this problem:
    - Case 1 : When B is greater than length of C, return 0
    - Case 2: When B is smaller than length of C, the answer is lengthOfA^B (divide it by the B and
     subtract that number from the whole when A contains 0
    - Case 3: When B is equal to length of C.


- Complexity:
    - Time complexity: O(A * C) where A is the length of the array and C is the number of digits in
     C
    - Space complexity: O(1)

- Improvements/Comments
    - The current code has bugs and fails with certain inputs. Need to implement this problem using
    dynammic programming.